open Ezjsonm;

type t = {
  id: string,
  json: Ezjsonm.t,
};

let gen_iri = (host, id) => {
  "http://" ++ host ++ "/annotations/" ++ id;
};

// id autogenerated or via slug
let from_post = (~data, ~id, ~host) => {
  let json = from_string(data);
  if (mem(json, ["id"])) {
    Result.error("id can not be supplied");
  } else {
    let iri = gen_iri(host, id);
    let json_with_id = update(json, ["id"], Some(string(iri)));
    let json' = `O(get_dict(json_with_id));
    Result.ok({id, json: json'});
  };
};

// id contained in body
let from_put = (~data) => {
  let json = from_string(data);
  switch (find_opt(json, ["id"])) {
  | None => Result.error("id does not exit")
  | Some(id) => Result.ok({id: get_string(id), json})
  };
};

// accessors
let id = r => r.id;

let json = r => r.json;

let to_string = r => {
  Ezjsonm.to_string(r.json);
};
