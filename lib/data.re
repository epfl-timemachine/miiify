open Ezjsonm;

type t = {
  id: list(string),
  json: Ezjsonm.value,
};

let get_timestamp = () => {
  let t = Ptime_clock.now();
  Ptime.to_rfc3339(t, ~tz_offset_s=0);
};

let get_iri = (host, id) => {
  switch (id) {
  | [container_id, "main"] =>
    "http://" ++ host ++ "/annotations/" ++ container_id
  | [container_id, "collection", annotation_id] =>
    "http://"
    ++ host
    ++ "/annotations/"
    ++ container_id
    ++ "/"
    ++ annotation_id
  | _ => failwith("well that's embarassing")
  };
};

// id autogenerated or via slug
let post = (~data, ~id, ~host) => {
  switch (from_string(data)) {
  | exception (Parse_error(_, _)) => Result.error("could not parse JSON")
  | json =>
    if (mem(json, ["id"])) {
      Result.error("id can not be supplied");
    } else {
      let iri = get_iri(host, id);
      let timestamp = get_timestamp();
      let json = update(json, ["id"], Some(string(iri)));
      let json = update(json, ["created"], Some(string(timestamp)));
      Result.ok({id, json});
    }
  };
};

let post_annotation = (~data, ~id, ~host) => {
  post(~data, ~id, ~host);
};

let post_container = (~data, ~id, ~host) => {
  // check to see if it looks like container request
  switch (Validate.basic_container(~data)) {
  | Error(m) => Result.error(m)
  | Ok () => post(~data, ~id, ~host)
  };
};

// id contained in body
let put_annotation = (~data, ~id, ~host) => {
  switch (from_string(data)) {
  | exception (Parse_error(_, _)) => Result.error("could not parse JSON")
  | json =>
    switch (find_opt(json, ["id"])) {
    | None => Result.error("id does not exit")
    | Some(id') =>
      let iri = get_iri(host, id);
      switch (get_string(id')) {
      | exception (Parse_error(_, _)) => Result.error("id not string")
      | iri' =>
        if (iri == iri') {
          let timestamp = get_timestamp();
          let json = update(json, ["modified"], Some(string(timestamp)));
          Result.ok({id, json});
        } else {
          Result.error("id in body does not match");
        }
      };
    }
  };
};

// accessors
let id = r => r.id;

let json = r => r.json;

// utility
let to_string = r => {
  Ezjsonm.value_to_string(r.json);
};
