open Ezjsonm;

type t = {
  id: string,
  json: Ezjsonm.t,
};

let gen_iri = (host, id) => {
  "http://" ++ host ++ "/annotations/" ++ id;
};

// id autogenerated or via slug
let from_post = (~data, ~id, ~host) => {
  switch (from_string(data)) {
  | exception (Parse_error(_, m)) => Result.error(m)
  | json =>
    if (mem(json, ["id"])) {
      Result.error("id can not be supplied");
    } else {
      let iri = gen_iri(host, id);
      let json_with_id = update(json, ["id"], Some(string(iri)));
      let json' = `O(get_dict(json_with_id));
      Result.ok({id, json: json'});
    }
  };
};

// id contained in body
let from_put = (~data, ~id, ~host) => {
  switch (from_string(data)) {
  | exception (Parse_error(_, _)) => Result.error("could not parse JSON")
  | json =>
    switch (find_opt(json, ["id"])) {
    | None => Result.error("id does not exit")
    | Some(id') =>
      let iri = gen_iri(host, id);
      switch (get_string(id')) {
      | exception (Parse_error(_, _)) => Result.error("id not string")
      | iri' =>
        if (iri == iri') {
          Result.ok({id: iri, json});
        } else {
          Result.error("id does not match");
        }
      };
    }
  };
};

// accessors
let id = r => r.id;

let json = r => r.json;

// utility
let to_string = r => {
  Ezjsonm.to_string(r.json);
};
