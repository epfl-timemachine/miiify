openapi: "3.0.0"
info:
  title: Miiify API
  version: "v1"
  description: "Miiify is W3C annotation server"
servers:
  - url: http://miiify.rocks
paths:
  /:
    get:
      tags:
        - welcome message
      summary: Hello Miiify!
      description: Displays a welcome message from root path.
      responses:
        "200":
          description: OK
          content:
            text/html:
              schema:
                type: string
              examples:
                html:
                  summary: A welcome message
                  value: "Welcome to Miiify!"

  /version:
    get:
      tags:
        - version message
      summary: Miiify version!
      description: Displays the current version.
      responses:
        "200":
          description: OK
          content:
            text/html:
              schema:
                type: string
              examples:
                html:
                  summary: Version message
                  value: "0.1.0"

  /annotation/:
    post:
      tags:
        - create container
      summary: create a new container
      description: Creates a new container to store annotations. Please refer to the Web Annotation Data Model for a description on the JSON that can be used. Currently miffy will only check the type field is valid.
      parameters:
        - in: header
          name: Host
          schema:
            type: string
            example: miiify.rocks
            description: Override the default host sent from client.
          required: false
        - in: header
          name: Slug
          schema:
            type: string
            example: my-container
            description: Specify the container name. If not supplied a system generated name with be used.
          required: false
      requestBody:
        required: true
        description: Basic container data
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/create_container"
      responses:
        "201":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/create_container_response"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
        "500":
          description: Internal Server Error
          content:
            text/html:
              schema:
                type: string
                example: Something went wrong!

  /annotation/{container_id}/:
    post:
      tags:
        - create annotation
      summary: add annotation to collection
      description: Creates a new annotation and adds it to the container collection. Please refer to the Web Annotation Data Model for a description on the JSON that can be used. Currently Miiify will only check the type field is valid and there is no id key supplied.
      parameters:
        - in: header
          name: Host
          schema:
            type: string
            example: miiify.rocks
            description: Override the default host sent from client.
          required: false
        - in: header
          name: Slug
          schema:
            type: string
            example: annotation1
            description: Specify the annotation name. If not supplied a system generated name with be used.
          required: false
        - name: container_id
          in: path
          required: true
          description: the unique identifier of a container
          schema:
            type: string
      requestBody:
        required: true
        description: Basic annotation data
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/create_annotation"
      responses:
        "201":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/create_annotation_response"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
        "500":
          description: Internal Server Error
          content:
            text/html:
              schema:
                type: string
                example: Something went wrong!

    get:
      tags:
        - retrieve annotation collection
      summary: "retrieve annotation collection"
      description: "Retrieve the annotations as a collection."
      parameters:
        - in: header
          name: If-None-Match
          schema:
            type: string
            example: "caa80ca1e4cc5f2253df5ee35293236350b19194"
            description: "ETag support for supporting caching."
          required: false
        - in: header
          name: Prefer
          schema:
            type: string
            default: return=representation;include="http://www.w3.org/ns/oa#PreferContainedDescriptions"
            enum:
              - return=representation;include="http://www.w3.org/ns/oa#PreferContainedDescriptions"
              - return=representation;include="http://www.w3.org/ns/oa#PreferContainedIRIs"
              - return=representation;include="http://www.w3.org/ns/ldp#PreferMinimalContainer"
            description: "ETag support for comparing uniqueness."
          required: false
        - name: container_id
          in: path
          required: true
          description: the unique identifier of a container
          schema:
            type: string
      responses:
        "200":
          description: success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/collection"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
        "304":
          description: Not Modified
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
        "500":
          description: Internal Server Error
          content:
            text/html:
              schema:
                type: string
                example: Something went wrong!

    delete:
      tags:
        - delete container
      summary: delete container and its collection
      description: Deletes a container including its entire collection.
      parameters:
        - in: header
          name: If-Match
          schema:
            type: string
            example: "caa80ca1e4cc5f2253df5ee35293236350b19194"
            description: "ETag support for comparing uniqueness."
          required: false
        - name: container_id
          in: path
          required: true
          description: the unique identifier of a container
          schema:
            type: string
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
        "412":
          description: Precondition Failed
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
        "500":
          description: Internal Server Error
          content:
            text/html:
              schema:
                type: string
                example: something went wrong!

  /annotation/{container_id}:
    get:
      tags:
        - retrieve annotation page
      summary: "retrieve annotation page"
      description: "An annotation collection can be broken down into a series of pages based on the default limit of 200 annotations per page."
      parameters:
        - in: query
          name: page
          schema:
            type: integer
          description: Access individual pages.
        - in: header
          name: If-None-Match
          schema:
            type: string
            example: "caa80ca1e4cc5f2253df5ee35293236350b19194"
            description: "ETag support for supporting caching."
          required: false
        - in: header
          name: Prefer
          schema:
            type: string
            default: return=representation;include="http://www.w3.org/ns/oa#PreferContainedDescriptions"
            enum:
              - return=representation;include="http://www.w3.org/ns/oa#PreferContainedDescriptions"
              - return=representation;include="http://www.w3.org/ns/oa#PreferContainedIRIs"
              - return=representation;include="http://www.w3.org/ns/ldp#PreferMinimalContainer"
            description: "ETag support for comparing uniqueness."
          required: false
        - name: container_id
          in: path
          required: true
          description: the unique identifier of a container
          schema:
            type: string
      responses:
        "200":
          description: success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/page"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
        "304":
          description: Not Modified
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
        "500":
          description: Internal Server Error
          content:
            text/html:
              schema:
                type: string
                example: Something went wrong!

  /annotation/{container_id}/{annotation_id}:
    get:
      tags:
        - retrieve annotation
      summary: "retrieve annotation"
      description: "Retrieve a single annotation from a container."
      parameters:
        - in: header
          name: If-None-Match
          schema:
            type: string
            example: "caa80ca1e4cc5f2253df5ee35293236350b19194"
            description: "ETag support for supporting caching."
          required: false
        - in: header
          name: Prefer
          schema:
            type: string
            default: return=representation;include="http://www.w3.org/ns/oa#PreferContainedDescriptions"
            enum:
              - return=representation;include="http://www.w3.org/ns/oa#PreferContainedDescriptions"
              - return=representation;include="http://www.w3.org/ns/oa#PreferContainedIRIs"
              - return=representation;include="http://www.w3.org/ns/ldp#PreferMinimalContainer"
            description: "ETag support for comparing uniqueness."
          required: false
        - name: container_id
          in: path
          required: true
          description: the unique identifier of a container
          schema:
            type: string
        - name: annotation_id
          in: path
          required: true
          description: the unique identifier of an annotation
          schema:
            type: string
      responses:
        "200":
          description: success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/create_annotation_response"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
        "304":
          description: Not Modified
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
        "500":
          description: Internal Server Error
          content:
            text/html:
              schema:
                type: string
                example: Something went wrong!
    put:
      tags:
        - modify annotation
      summary: "modify annotation"
      description: "Modify a single annotation within a container. The id field within the JSON payload must match the id field in the annotation being modified."
      parameters:
        - in: header
          name: Host
          schema:
            type: string
            example: miiify.rocks
            description: Override the default host sent from client.
          required: false
        - in: header
          name: If-Match
          schema:
            type: string
            example: "caa80ca1e4cc5f2253df5ee35293236350b19194"
            description: "ETag support for comparing uniqueness.."
          required: false
        - name: container_id
          in: path
          required: true
          description: the unique identifier of a container
          schema:
            type: string
        - name: annotation_id
          in: path
          required: true
          description: the unique identifier of an annotation
          schema:
            type: string
      responses:
        "200":
          description: success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/modify_annotation_response"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
        "412":
          description: Precondition Failed
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
        "500":
          description: Internal Server Error
          content:
            text/html:
              schema:
                type: string
                example: Something went wrong!

    delete:
      tags:
        - delete annotation
      summary: "delete annotation"
      description: "Delete a single annotation from a container."
      parameters:
        - in: header
          name: If-Match
          schema:
            type: string
            example: "caa80ca1e4cc5f2253df5ee35293236350b19194"
            description: "ETag support for comparing uniqueness.."
          required: false
        - name: container_id
          in: path
          required: true
          description: the unique identifier of a container
          schema:
            type: string
        - name: annotation_id
          in: path
          required: true
          description: the unique identifier of an annotation
          schema:
            type: string
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
        "412":
          description: Precondition Failed
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
        "500":
          description: Internal Server Error
          content:
            text/html:
              schema:
                type: string
                example: Something went wrong!

components:
  schemas:
    error:
      type: object
      properties:
        code:
          type: integer
          example: 400
          description: The HTTP error code
        reason:
          type: string
          example: "something went wrong!"
          description: Human readable error message.

    create_container:
      type: object
      properties:
        type:
          example:
            - BasicContainer
            - AnnotationCollection
          description: A mandatory type for differentiating a container from an annotation.

    create_container_response:
      type: object
      properties:
        type:
          example:
            - BasicContainer
            - AnnotationCollection
          description: A mandatory array type for differentiating a container from an annotation.
        created:
          type: string
          example: "2021-10-02T15:57:29Z"
          description: The same data used to create a container but with a created key added.

    create_annotation:
      type: object
      properties:
        type:
          type: string
          example: Annotation
          description: A mandatory type for differentiating an annotation from a container.

    create_annotation_response:
      type: object
      properties:
        type:
          type: string
          example: Annotation
          description: A mandatory type for differentiating an annotation from a container.
        created:
          type: string
          example: "2021-10-02T15:57:29Z"
          description: The same data used to create a container but with a created key added.

    modify_annotation_response:
      type: object
      properties:
        type:
          type: string
          example: Annotation
          description: A mandatory type for differentiating an annotation from a container.
        modified:
          type: string
          example: "2021-10-02T15:57:29Z"
          description: The same data used to create a container but with a modified key added.

    collection:
      type: object
      properties:
        type:
          example:
            - BasicContainer
            - AnnotationCollection
          description: A mandatory array type for differentiating a collection from an annotation.

    page:
      type: object
      properties:
        type:
          example: AnnotationPage
          description: A mandatory string type for differentiating a page from an annotation.
